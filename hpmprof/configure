#!/bin/bash 

#parse command arguments
config_args=$(/usr/bin/getopt -n $0 -l "help,with-mpicc:,with-binutils:,with-papi:,with-fortran:" -o "hw:b:p:f:" -- "$@")

if [ $? -ne 0 ]; then
  echo check arguments :  ./configure --help
  exit
fi

eval set -- "$config_args"

help_flag=0
binutils_flag=0
papi_flag=0
mpicc_flag=0
fortran_flag=1

while true 
do
  case "$1" in
    -h|--help)
     echo "configure options :"
     echo "--help  (prints this help message)"
     echo "--with-mpicc=your_mpi_compiler (needed only if your MPI compiler is not mpicc or Cray cc)"
     echo "--with-binutils=/path/to/binutils  (required and must have sub-directories : lib,lib64,include)"
     echo "--with-papi=/path/to/papi  (required and must have sub-directories : lib,include)"
     echo "--with-fortran=[yes|no]  (default is \"yes\", specify \"no\" to wrap only the C interfaces to MPI)"
     exit;;
  
    -w|--with-mpicc)
     mpicc_flag=1
     mpi_compiler="$2"
     shift 2;; 

    -b|--with-binutils)
     binutils_flag=1
     binutils_path="$2"
     echo using binutils_path=$binutils_path
     shift 2;;

    -p|--with-papi)
     papi_flag=1
     papi_path="$2"
     echo using papi_path=$papi_path
     shift 2;;

    -f|--with-fortran)
     fortran_option="$2"
     if [ ${fortran_option} != "no" ] && [ ${fortran_option} != "yes" ]; then
       echo error : specify --with-fortran=yes  or --with-fortran=no ... exiting
       exit
     fi
     if [ $fortran_option == "no" ]; then
       fortran_flag=0;
     fi
     shift 2;;

    --)
     shift
     break;;
  esac
done

# if the user specifies --with-mpicc=mpi_compiler, use it, else use mpicc or Cray cc
if [ $mpicc_flag == 1 ]; then
  MPICC=$( command -v $mpi_compiler )
  if [ -z "$MPICC" ]; then
    echo ensure that $mpi_compiler is in your PATH and re-run the configure script ... exiting
    exit
  else
    if [ -x $MPICC ]; then
      MPI_BINDIR=`dirname $MPICC`
      echo found MPI C compiler = $MPICC
      compiler=`$mpi_compiler --version | head -n 1 | cut -b 1-3`
      if [ "$compiler" != "gcc" ]; then
        echo please set $mpi_compiler to use gcc as the C compiler and re-run the configure script ... exiting
        exit
      else
       cp makefile.in makefile
       sed -i "s/CC = mpicc/CC = $mpi_compiler/g" makefile
      fi  
    else
      echo ensure that $mpi_compiler is in your PATH and re-run the configure script ... exiting
      exit
    fi  
  fi  
else
  if [ -z ${CRAYPE_VERSION} ]; then
    MPICC=$( command -v mpicc )
    if [ -z "$MPICC" ]; then
      echo ensure that mpicc is in your PATH and re-run the configure script ... exiting
      exit
    elif [ -x $MPICC ]; then
      MPI_BINDIR=`dirname $MPICC`
      echo found mpicc = $MPICC
      compiler=$(mpicc --version | head -n 1 | cut -b 1-3)
      if [ "$compiler" != "gcc" ]; then
        echo please set the mpicc command to use gcc as the C compiler and re-run the configure script
        echo example: "export OMPI_CC=gcc; or export MPICH_CC=gcc" ... exiting
        exit
      else
       cp makefile.in makefile
      fi
    fi
  else
    CRAYCC=$( command -v cc )
    if [ -x $CRAYCC ]; then
      MPI_BINDIR=`dirname $CRAYCC`
      echo found cc = $CRAYCC
      compiler=$(cc --version | head -n 1 | cut -b 1-3)
      if [ "$compiler" != "gcc" ]; then
        echo please set the cc command to use gcc as the C compiler and re-run the configure script ... exiting
        exit
      else
       cp makefile.in makefile
       sed -i "s/CC = mpicc/CC = cc/g" makefile
      fi
    else
      echo ensure that cc is in your PATH and re-run the configure script ... exiting
      exit
    fi
  fi
fi

#check for inclusion of Fortran MPI profiling entry points
MPICH_CMD=$MPI_BINDIR/mpichversion
INTELMPI_CMD=$MPI_BINDIR/impi_info
if [ ! -z "$MPICH_CMD" ]  && [ -x $MPICH_CMD ]; then
  fortran_flag=0;
fi
if [ ! -z "$INTELMPI_CMD" ] && [ -x $INTELMPI_CMD ]; then
  fortran_flag=0;
fi
if [ $fortran_flag == "0" ]; then
  sed -i "s/ FNAME = / FNAME = -DSKIP_FORTRAN/g" makefile
fi

if [ $binutils_flag == 0 ]; then
  echo GNU binutils and PAPI are required : ./configure --with-binutils=/path/to/binutils --with-papi=/path/to/papi
  exit
fi

if [ $papi_flag == 0 ]; then
  echo PAPI and GNU binutils are required : ./configure --with-binutils=/path/to/binutils --with-papi=/path/to/papi
  exit
fi

if [ $binutils_flag == 1 ]; then
# check for gnu binutils bfd components
  if [[ ! -z $binutils_path ]]; then
    echo -n testing for libbdf.a...
    if [ -f $binutils_path/lib/libbfd.a ]; then
      echo found
    else
      echo libbfd.a not found ... check your binutils path ... exiting
      exit
    fi

    echo -n testing for libiberty.a...
    if [ -f $binutils_path/lib64/libiberty.a ]; then
      echo found
    elif [ -f $binutils_path/lib/libiberty.a ]; then
      echo found
    else
      echo libiberty.a not found ... check your binutils path ... exiting
      exit
    fi

    echo -n testing for bfd.h...
    if [ -f $binutils_path/include/bfd.h ]; then
      echo found
    else
      echo bfd.h not found ... check your binutils path ... exiting
      exit
    fi

    echo -n testing for binutils config.h...
    if [ -f $binutils_path/include/config.h ]; then
      echo found
    else
      echo binutils config.h not found ... check your binutils path ... exiting
      exit
    fi

    x_binutils_path="$(echo $binutils_path | sed 's/\//\\\//g')"

    sed -i "s/#VPROF = -DVPROF/ VPROF = -DVPROF/g" makefile
    sed -i "s/BINUTILS_INSTALL_PATH/$x_binutils_path/g" makefile

  else

    echo "error  : the configure option --with-binutils  is required for vprof support"
    echo "example : ./configure --with-vprof --with-binutils=/path/to/binutils"
    exit

  fi

fi

if [ $papi_flag == 1 ]; then
# check for papi components
  if [[ ! -z $papi_path ]]; then
    echo -n testing for libpapi.a...
    if [ -f $papi_path/lib/libpapi.a ]; then
      echo found
    else
      echo libpapi.a not found ... check your papi path ... exiting
      exit
    fi

    echo -n testing for papi.h...
    if [ -f $papi_path/include/papi.h ]; then
      echo found
    else
      echo papi.h not found ... check your papi path ... exiting
      exit
    fi

    x_papi_path="$(echo $papi_path | sed 's/\//\\\//g')"

    sed -i "s/PAPI_INSTALL_PATH/$x_papi_path/g" makefile

  else

    echo "error  : the configure option --with-papi  is required"
    echo "example : ./configure --with-binutils=/path/to/binutils  --with-papi=/path/to/papi"
    exit

  fi

  echo ""
  echo "Edit \"makefile\" and ensure that paths for gnu binutils and papi are set correctly"
  echo "Set the nominal CPU frequency in units of MHz on the line : SET_FREQ = -DCPU_MHZ=3000"
  echo "To build the libhpmprof.so library, type : make"
  echo ""
fi

